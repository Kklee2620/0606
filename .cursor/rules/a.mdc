---
description: 
globs: 
alwaysApply: true
---

### 一、产品经理职责在 CURSOR 中的定位

CURSOR 作为一个支持 AI 驱动开发的工具，产品经理在其中扮演关键角色，包括：

* **需求拆解与模块规划**
* **接口逻辑与开发路径设计**
* **统一命名规范推动**
* **AI 生成代码前的语义对齐**
* **回顾与重构过程参与**

---

### 二、使用规则

#### 1. 模块划分与命名规则

* 每一个模块（功能页面/服务单元）应设立独立的目录结构。
* 文件与函数命名需统一（建议使用 kebab-case 或 camelCase，根据项目习惯）。
* 在使用 Cursor 生成代码前先制定关键函数名和参数列表，便于 AI 补全。

#### 2. Prompt 编写建议（AI 协作）

* **描述明确目标与约束**（如“生成一个登录表单，字段包括手机号与验证码，前端使用 React+Tailwind”）。
* **避免一次生成多个不关联功能**，保持单一职责。
* **预设边界与交互**：告知 Cursor 哪些状态/逻辑需要保留供后续扩展。

#### 3. 代码生成时机控制

* 推荐在以下阶段使用 Cursor：

  * 初始原型代码生成（如页面布局、API 模板）
  * 重构期批量重命名、补充注释、格式对齐
* 避免在结构尚未明确时反复使用，以免生成混乱代码。

---

### 三、产品经理专属操作步骤建议

| 阶段    | 操作                   | 工具配置                      | 注意事项          |
| ----- | -------------------- | ------------------------- | ------------- |
| 需求分析  | 画出模块流程图              | Figma + 文档备注              | 明确用户故事驱动每个模块  |
| 逻辑分拆  | 划分前后端边界              | CURSOR comment block      | 约定接口数据结构与命名   |
| 代码生成  | 编写 prompt 用于 AI 辅助开发 | CURSOR Prompt history     | 尽量以可复用组件为单元生成 |
| 回顾与重构 | 审查 AI 生成代码质量         | Git diff + CURSOR comment | 标注不符合设计预期的地方  |

---

### 四、常见风险与对策

| 风险        | 应对策略                                  |
| --------- | ------------------------------------- |
| 模块逻辑耦合混乱  | 强化命名统一性与职责明确性                         |
| 生成代码冗余或重复 | 先写伪代码或接口草图，避免 prompt 泛泛而谈             |
| 难以控制代码质量  | 使用 code review + cursor reformat 自动规范 |
| 协作过程沟通断层  | 建议产品经理直接在 Cursor 文件中嵌入注释与问题提示         |

---

如你希望获得具体的团队协作流程模板、prompt 示例库或代码生成前的 checklist，也可以告诉我，我可以为你定制提供。是否还需我帮你制定更详细的「Cursor 项目管理实践指南」？



